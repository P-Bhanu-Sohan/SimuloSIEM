version: '3.8'
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    restart: always
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    healthcheck:
      test: ["CMD", "sh", "-c", "echo ruok | nc localhost 2181"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:7.3.0
    restart: always
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      zookeeper:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis
    restart: always
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres:
    image: postgres
    restart: always
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: simulosiem
      POSTGRES_HOST_AUTH_METHOD: password
    volumes:
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d simulosiem"]
      interval: 10s
      timeout: 5s
      retries: 5

  vector:
    image: timberio/vector:latest-debian
    restart: always
    volumes:
      - ./vector/vector.yaml:/etc/vector/vector.yaml
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  detection-engine:
    build: ./detection_engine
    restart: always
    depends_on:
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy # Added dependency on postgres

  log-generator:
    build: ./log_generator
    restart: always
    depends_on:
      kafka:
        condition: service_healthy

  grafana:
    image: grafana/grafana:8.5.2
    restart: always
    ports:
      - "3000:3000"
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      postgres:
        condition: service_healthy



  
